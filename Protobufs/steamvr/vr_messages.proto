option optimize_for = SPEED;
option cc_generic_services = false;

message CVRMsg_Connect {
	optional string hmd_interface_version = 1;
	optional uint32 pid = 2;
	optional string binary_path = 3;
	optional uint32 application_type = 4;
	optional bool reconnect = 5;
}

message CVRMsg_ConnectResponse {
	optional int32 result = 1;
	optional bool debug_pipe = 2;
}

message CVRMsg_ComputeDistortion {
	optional uint32 eye = 1;
	optional float u = 2;
	optional float v = 3;
}

message CVRMsg_ComputeDistortionResponse {
	optional float red_u = 1;
	optional float red_v = 2;
	optional float green_u = 3;
	optional float green_v = 4;
	optional float blue_u = 5;
	optional float blue_v = 6;
}

message CVRMsg_GetDriverInfo {
}

message CVRMsg_GetDriverInfoResponse {
	message DriverInfo {
		optional string driver_id = 1;
	}

	repeated .CVRMsg_GetDriverInfoResponse.DriverInfo driver = 1;
}

message CVRMsg_GetDriverDetail {
	optional string driver_id = 1;
}

message CVRMsg_GetDriverDetailResponse {
	optional int32 init_error = 1;
}

message CVRMsg_GetDisplayInfo {
	optional string driver_id = 1;
}

message CVRMsg_GetDisplayInfoResponse {
	message DisplayInfo {
		optional string display_id = 1;
		optional string model_number = 2;
		optional string serial_number = 3;
	}

	repeated .CVRMsg_GetDisplayInfoResponse.DisplayInfo display = 1;
}

message CVRMsg_TrackedCamera_GetFormatDimensions {
	optional uint32 device_index = 1;
	optional uint32 video_stream_format = 2;
}

message CVRMsg_TrackedCamera_GetFormatDimensionsResponse {
	optional bool result = 1;
	optional uint32 width = 2;
	optional uint32 height = 3;
}

message CVRMsg_TrackedCamera_SetVideoStreamFormat {
	optional uint32 device_index = 1;
	optional uint32 video_stream_format = 2;
}

message CVRMsg_TrackedCamera_SetVideoStreamFormatResponse {
	optional bool result = 1;
}

message CVRMsg_TrackedCamera_GetVideoStreamFormat {
	optional uint32 device_index = 1;
}

message CVRMsg_TrackedCamera_GetVideoStreamFormatResponse {
	optional bool result = 1;
	optional uint32 video_stream_format = 2;
}

message CVRMsg_TrackedCamera_Enable {
	optional uint32 device_index = 1;
	optional bool enable = 2;
}

message CVRMsg_TrackedCamera_EnableResponse {
	optional bool result = 1;
	optional uint32 video_stream_format = 2;
	optional uint32 num_frame_buffers = 3;
	optional uint32 frame_buffer_datasize = 4;
}

message CVRMsg_TrackedCamera_StartVideoStream {
	optional uint32 device_index = 1;
}

message CVRMsg_TrackedCamera_StartVideoStreamResponse {
	optional bool result = 1;
}

message CVRMsg_TrackedCamera_StopVideoStream {
	optional uint32 device_index = 1;
}

message CVRMsg_TrackedCamera_StopVideoStreamResponse {
	optional bool result = 1;
}

message CVRMsg_TrackedCamera_IsVideoStreamActive {
	optional uint32 device_index = 1;
}

message CVRMsg_TrackedCamera_IsVideoStreamActiveResponse {
	optional bool result = 1;
	optional bool paused = 2;
	optional float elapsed_time = 3;
}

message CVRMsg_TrackedCamera_SetAutoExposure {
	optional uint32 device_index = 1;
	optional bool enable = 2;
}

message CVRMsg_TrackedCamera_SetAutoExposureResponse {
	optional bool result = 1;
}

message CVRMsg_TrackedCamera_PauseVideoStream {
	optional uint32 device_index = 1;
}

message CVRMsg_TrackedCamera_PauseVideoStreamResponse {
	optional bool result = 1;
}

message CVRMsg_TrackedCamera_ResumeVideoStream {
	optional uint32 device_index = 1;
}

message CVRMsg_TrackedCamera_ResumeVideoStreamResponse {
	optional bool result = 1;
}

message CVRMsg_TrackedCamera_GetDistortion {
	message InputCoord {
		optional float u = 1;
		optional float v = 2;
	}

	optional uint32 device_index = 1;
	repeated .CVRMsg_TrackedCamera_GetDistortion.InputCoord coordinates = 2;
}

message CVRMsg_TrackedCamera_GetDistortionResponse {
	message OutputCoord {
		optional float u = 1;
		optional float v = 2;
	}

	optional bool result = 1;
	repeated .CVRMsg_TrackedCamera_GetDistortionResponse.OutputCoord coordinates = 2;
}

message CVRMsg_TrackedCamera_GetProjection {
	optional uint32 device_index = 1;
	optional uint32 frame_type = 2;
	optional float z_near = 3;
	optional float z_far = 4;
}

message CVRMsg_TrackedCamera_GetProjectionResponse {
	optional bool result = 1;
	repeated float matrix_value = 2;
}

message CVRMsg_TrackedCamera_SetCompatibilityMode {
	optional uint32 device_index = 1;
	optional int32 compatibility_mode = 2;
}

message CVRMsg_TrackedCamera_SetCompatibilityModeResponse {
	optional bool result = 1;
}

message CVRMsg_TrackedCamera_AcquireVideoStreamingService {
	optional uint32 device_index = 1;
}

message CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse {
	optional uint64 service_handle = 1;
}

message CVRMsg_TrackedCamera_ReleaseVideoStreamingService {
	optional uint64 service_handle = 1;
}

message CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse {
	optional bool result = 1;
}

message CVRMsg_TrackedCamera_GetFrameBounds {
	optional uint32 device_index = 1;
	optional uint32 frame_type = 2;
}

message CVRMsg_TrackedCamera_GetFrameBoundsResponse {
	optional bool result = 1;
	optional uint32 left = 2;
	optional uint32 top = 3;
	optional uint32 width = 4;
	optional uint32 height = 5;
}

message CVRMsg_TrackedCamera_GetIntrinsics {
	optional uint32 device_index = 1;
	optional uint32 frame_type = 2;
}

message CVRMsg_TrackedCamera_GetIntrinsicsResponse {
	optional bool result = 1;
	optional float focal_x = 2;
	optional float focal_y = 3;
	optional float center_x = 4;
	optional float center_y = 5;
}

message CVRMsg_GetProperty {
	enum PropertyDataType {
		PropType_String = 1;
		PropType_Bool = 2;
		PropType_Int32 = 3;
		PropType_Uint64 = 4;
		PropType_Float = 5;
		PropType_Matrix34 = 6;
	}

	optional uint32 tracked_device_index = 1;
	optional uint32 property_id = 2;
	optional .CVRMsg_GetProperty.PropertyDataType request_data_type = 3 [default = PropType_String];
}

message CVRMsg_GetPropertyResponse {
	optional uint32 result = 1;
	optional string string_value = 2;
	optional bool bool_value = 3;
	optional int32 int32_value = 4;
	optional float float_value = 5;
	optional uint64 uint64_value = 6;
	repeated float matrix_value = 7;
	optional double cache_time = 100;
}

message CVRMsg_CompositorConnect {
	optional uint32 version = 1;
	optional uint32 pid = 2;
}

message CVRMsg_CompositorSetOverlay {
	optional uint32 width = 1;
	optional uint32 height = 2;
	optional uint32 depth = 3;
	optional bytes buffer = 4;
	optional uint64 overlay_handle = 5;
}

message CVRMsg_CompositorShowDashboard {
	optional uint32 primary_device = 1;
}

message CVRMsg_CompositorShowDashboardResponse {
}

message CVRMsg_CompositorHideDashboard {
}

message CVRMsg_CompositorHideDashboardResponse {
}

message CVRMsg_CompositorHandleSystemButton {
	optional bool down = 1;
}

message CVRMsg_CompositorHandleSystemButtonResponse {
}

message CVRMsg_CompositorConnectResponse {
	optional int32 result = 1;
}

message CVRMsg_CompositorClearFrameBuffer {
}

message CVRMsg_CompositorBringToFront {
}

message CVRMsg_CompositorGoToBack {
}

message CVRMsg_CompositorQuit {
}

message CVRMsg_CompositorShowMirrorWindow {
}

message CVRMsg_CompositorHideMirrorWindow {
}

message CVRMsg_CompositorDumpImages {
}

message CVRMsg_CompositorToggleCameraRoomView {
}

message CVRMsg_CompositorSetOverlayFromFile {
	optional string file_path = 1;
	optional uint64 overlay_handle = 2;
}

message CVRMsg_CompositorSetOverlayFromFileResponse {
	optional uint32 result = 1;
}

message CVRMsg_CompositorFadeToColor {
	optional float seconds = 1;
	optional float red = 2;
	optional float green = 3;
	optional float blue = 4;
	optional float alpha = 5;
	optional bool background = 6;
}

message CVRMsg_CompositorFadeGrid {
	optional float seconds = 1;
	optional bool fadein = 2;
}

message CVRMsg_CompositorPrepareInternalProcessTransition {
	optional uint32 old_pid = 1;
	optional uint32 new_pid = 2;
}

message CVRMsg_CompositorPrepareInternalProcessTransitionResponse {
}

message CVRMsg_TriggerHapticPulse {
	optional uint32 device_index = 1;
	optional uint32 axis_index = 2;
	optional uint32 pulse_duration = 3;
}

message CVRMsg_InputCaptureRequest {
}

message CVRMsg_InputCaptureResponse {
	optional bool result = 1;
}

message CVRMsg_DriverDebugRequest {
	optional uint32 device_index = 1;
	optional string request = 2;
}

message CVRMsg_DriverDebugResponse {
	optional string response = 1;
}

message CVRMsg_QuitProcessRequest {
	optional uint32 process_id = 1;
	optional bool force = 2;
}

message CVRMsg_QuitProcessResponse {
	optional bool response = 1;
}

message CVRMsg_AcknowledgeQuit_Exiting {
}

message CVRMsg_AcknowledgeQuit_UserPrompt {
}

message CVRMsg_AbortApplicationTransition {
}

message CVRMsg_SetMasterProcess {
	optional uint32 process_id = 1;
}

message CVRMsg_SetMasterProcessResponse {
}

message CVRMsg_StartAutolaunchOverlays {
}

message CVRMsg_PowerOffTrackedDevice {
	optional uint32 device_index = 1;
}

message CVRMsg_GetApplicationInfo {
	optional string app_key = 1;
}

message CVRMsg_MimeType {
	optional string mime_type = 1;
}

message CVRMsg_ApplicationInfo_Manifest {
	optional string app_key = 1;
	optional string name = 2;
	optional string launch_type = 3;
	optional string binary_path = 4;
	optional string working_directory = 5;
	optional string arguments = 6;
	optional string url = 7;
	optional string description = 8;
	optional string news_url = 9;
	optional string image_path = 10;
	optional bool is_dashboard_overlay = 11;
	optional string manifest_path = 12;
	optional string source = 13;
	optional bool is_template = 14 [default = false];
	optional bool is_instance = 15 [default = false];
	repeated .CVRMsg_MimeType supported_mime_types = 16;
}

message CVRMsg_ApplicationInfo_Options {
	optional bool is_autolaunch = 1;
	optional uint64 last_launch_time = 2;
	repeated .CVRMsg_MimeType handles_mime_types = 3;
}

message CVRMsg_ApplicationInfo {
	optional uint32 result = 1;
	optional .CVRMsg_ApplicationInfo_Manifest manifest = 2;
	optional .CVRMsg_ApplicationInfo_Options options = 3;
	optional uint32 data_revision = 4;
}

message CVRMsg_ApplicationManifestRequest {
	optional string manifest_path = 1;
	optional bool temporary = 2;
}

message CVRMsg_ApplicationManifestResponse {
	optional uint32 result = 1;
}

message CVRMsg_LaunchApplication {
	optional string app_key = 1;
	optional bool dashboard_overlay = 2;
}

message CVRMsg_LaunchApplicationResponse {
	optional uint32 result = 1;
}

message CVRMsg_LaunchApplicationForMimeType {
	optional string mime_type = 1;
	optional string args = 2;
}

message CVRMsg_LaunchApplicationForMimeTypeResponse {
	optional uint32 result = 1;
}

message CVRMsg_LaunchTemplateApplication {
	message AppOverrideKey {
		optional string key = 1;
		optional string value = 2;
	}

	optional string template_app_key = 1;
	optional string requested_app_key = 2;
	repeated .CVRMsg_LaunchTemplateApplication.AppOverrideKey override_keys = 3;
}

message CVRMsg_LaunchTemplateApplicationResponse {
	optional uint32 result = 1;
}

message CVRMsg_SetApplicationOptions {
	optional string app_key = 1;
	optional .CVRMsg_ApplicationInfo_Options options = 2;
}

message CVRMsg_SetApplicationOptionsResponse {
	optional uint32 result = 1;
}

message CVRMsg_SetDefaultApplicationForMimeType {
	optional string app_key = 1;
	optional string mime_type = 2;
}

message CVRMsg_SetDefaultApplicationForMimeTypeResponse {
	optional uint32 result = 1;
}

message CVRMsg_GetApplicationLaunchArguments {
	optional uint32 handle = 1;
}

message CVRMsg_GetApplicationLaunchArgumentsResponse {
	optional bool result = 1;
	optional string args = 2;
}

message CVRMsg_StartHomeApp {
}

message CVRMsg_StartHomeAppResponse {
	optional int32 result = 1;
}

message CVRMsg_SetApplicationProcessId {
	optional string app_key = 1;
	optional uint32 processid = 2;
}

message CVRMsg_SetApplicationProcessIdResponse {
	optional uint32 result = 1;
}

message CVRMsg_PerformApplicationPrelaunchCheck {
	optional string app_key = 1;
}

message CVRMsg_PerformApplicationPrelaunchCheckResponse {
	optional uint32 result = 1;
}

message CVRMsg_CancelApplicationLaunch {
	optional string app_key = 1;
}

message CVRMsg_CancelApplicationLaunchResponse {
	optional bool success = 1;
}

message CVRMsg_LaunchInternalProcess {
	optional string binary_path = 1;
	optional string arguments = 2;
	optional string working_directory = 3;
}

message CVRMsg_LaunchInternalProcessResponse {
	optional uint32 result = 1;
	optional uint32 new_pid = 2;
}

message CVRMsg_SetNotificationImage {
	optional uint32 notification_id = 1;
}

message CVRMsg_SetNotificationImageResponse {
	optional bool result = 1;
}

message CVRMsg_CreateSwapTextureSet {
	optional uint32 format = 1;
	optional uint32 width = 2;
	optional uint32 height = 3;
}

message CVRMsg_CreateSwapTextureSetResponse {
	optional uint64 texture0 = 1;
	optional uint64 texture1 = 2;
	optional uint64 texture2 = 3;
}

message CVRMsg_DestroySwapTextureSet {
	optional uint64 texture = 1;
}

message CVRMsg_Settings_Sync {
	optional bool force = 1;
}

message CVRMsg_Settings_Sync_Response {
	optional uint32 settingserror = 1;
	optional bool result = 2;
}

message CVRMsg_Settings_SetValue_Response {
	optional uint32 settingserror = 1;
}

message CVRMsg_Settings_GetBool {
	optional string section_key = 1;
	optional string settings_key = 2;
	optional bool default_value = 3;
}

message CVRMsg_Settings_GetBool_Response {
	optional uint32 settingserror = 1;
	optional bool value = 2;
	optional uint32 dirty_count = 3;
}

message CVRMsg_Settings_SetBool {
	optional string section_key = 1;
	optional string settings_key = 2;
	optional bool value = 3;
}

message CVRMsg_Settings_GetInt32 {
	optional string section_key = 1;
	optional string settings_key = 2;
	optional int32 default_value = 3;
}

message CVRMsg_Settings_GetInt32_Response {
	optional uint32 settingserror = 1;
	optional int32 value = 2;
	optional uint32 dirty_count = 3;
}

message CVRMsg_Settings_SetInt32 {
	optional string section_key = 1;
	optional string settings_key = 2;
	optional int32 value = 3;
}

message CVRMsg_Settings_GetFloat {
	optional string section_key = 1;
	optional string settings_key = 2;
	optional float default_value = 3;
}

message CVRMsg_Settings_GetFloat_Response {
	optional uint32 settingserror = 1;
	optional float value = 2;
	optional uint32 dirty_count = 3;
}

message CVRMsg_Settings_SetFloat {
	optional string section_key = 1;
	optional string settings_key = 2;
	optional float value = 3;
}

message CVRMsg_Settings_GetString {
	optional string section_key = 1;
	optional string settings_key = 2;
	optional uint32 max_string_length = 3;
	optional string default_value = 4;
}

message CVRMsg_Settings_GetString_Response {
	optional uint32 settingserror = 1;
	optional string value = 2;
	optional uint32 dirty_count = 3;
}

message CVRMsg_Settings_SetString {
	optional string section_key = 1;
	optional string settings_key = 2;
	optional string value = 3;
}

message CVRMsg_Settings_RemoveSection {
	optional string section_key = 1;
}

message CVRMsg_Settings_RemoveKeyInSection {
	optional string section_key = 1;
	optional string settings_key = 2;
}

message CVRMsg_CompositorRequestScreenshot {
	optional uint32 type = 1;
	optional string filename = 2;
	optional string vr_filename = 3;
}

message CVRMsg_CompositorRequestScreenshotResponse {
	optional int32 result = 1;
	optional uint32 handle = 2;
}

message CVRMsg_CompositorHookScreenshot {
	repeated uint32 types = 1;
}

message CVRMsg_CompositorHookScreenshotResponse {
	optional int32 result = 1;
}

message CVRMsg_CompositorGetScreenshotPropertyType {
	optional uint32 handle = 1;
}

message CVRMsg_CompositorGetScreenshotPropertyTypeResponse {
	optional uint32 type = 1;
	optional int32 result = 4;
}

message CVRMsg_CompositorGetScreenshotPropertyFilename {
	optional uint32 handle = 1;
	optional uint32 filename_type = 2;
}

message CVRMsg_CompositorGetScreenshotPropertyFilenameResponse {
	optional string filename = 1;
	optional int32 result = 2;
}

message CVRMsg_CompositorTakeStereoScreenshot {
	optional string filename = 1;
	optional string vr_filename = 2;
}

message CVRMsg_CompositorTakeStereoScreenshotResponse {
	optional int32 result = 1;
	optional uint32 handle = 2;
}

message CVRMsg_CompositorSubmitScreenshot {
	optional uint32 handle = 1;
	optional uint32 type = 2;
	optional string filename = 3;
	optional string vr_filename = 4;
}

message CVRMsg_CompositorSubmitScreenshotResponse {
	optional int32 result = 1;
}

message CVRMsg_CompositorUpdateScreenshotProgress {
	optional float progress = 1;
}

message CVRMsg_CompositorUpdateScreenshotProgressResponse {
	optional int32 result = 1;
}

