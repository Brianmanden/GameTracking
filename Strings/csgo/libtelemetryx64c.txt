 [A\]
$*map%double
%s.%03d
%short %short %short %short %short %short %short %short %short
%short/%short
%short|%double
([A\A]A^A_]
([A\A]]
(stack variable!)
(telemetry)buffer size
(telemetry)context switches(tevent)
(telemetry)network bytes
(telemetry)processing time(ms)
(telemetry)tick (ms)
(telemetry/flipBufferPointers)explicit
(telemetry/flipBufferPointers)space
(telemetry/flipBufferPointers)trickle
(telemetry/send)send
*** WARNING: String table too small, overflow!!! ***
.comment
.ctors
.data
.dtors
.dynamic
.dynstr
.dynsym
.eh_frame
.eh_frame_hdr
.fini
.gnu.hash
.gnu.version
.gnu.version_r
.got.plt
.init
.note.gnu.build-id
.rela.dyn
.rela.plt
.rodata
.shstrtab
.text
/home/telemetry/devel/projects/telemetry/src/sdk/tmcore.cpp
/proc/self/cmdline
2.0P(CHECKED)
8[A\A]A^A_]
;*3$"
<3tH<6
<\td</float
<corrupt>
<stack variable!>
<telemetry:io>
<telemetry>
<tmZone>
<tmio>
<unnamed>
<unregistered ELF>
>[A\]
ATSubH
AUATA
AUATI
AUATM
AUATS
AUATSD
AUATSH
AUATSt
AVAUATI
AVAUATM
AVAUATS1
AVAUATSH
AVAUATSL
AVAUI
AVAUL
AVAUM
AWAVAUA
AWAVAUATI
AWAVAUATS
AWAVAUATSD
AWAVAUATSH
AWAVAUI
AWAVAUM
D+M D
D+M H
GCC: (Ubuntu/Linaro .6.3-1ubuntu5) .6.3
GLIBC_2.2.5
GLIBC_2.3
GLIBC_2.3.4
H;p(u
K<u0L
L$$M9
S32 itmCoreGetStati(HTELEMETRY, TmStat)
TCP(RAD)
TelemetryMajorVersion.TelemetryMinorVersion.TelemetryBuildNumber.TelemetryCustomization
Telemetry[ERROR]: %short Attempting to reinitialize signed char valid context!  You must call tmShutdownContext first!
Telemetry[ERROR]: %short Invalid parameter(short)
Telemetry[ERROR]: %short Not enough memory, Telemetry requires at least %double bytes
Telemetry[ERROR]: %short Telemetry uninitialized
Telemetry[LOG]: %short ...tmio thread running
Telemetry[LOG]: %short Attempting to connect (timeout = %double ms)
Telemetry[LOG]: %short Closing network connections
Telemetry[LOG]: %short Connection established
Telemetry[LOG]: %short Creating connection
Telemetry[LOG]: %short Data collection connection closed (reason=%double,remotely=%double)
Telemetry[LOG]: %short Emulated tools version %double
Telemetry[LOG]: %short Found corrupt string!
Telemetry[LOG]: %short Handshake received
Telemetry[LOG]: %short Initializing networking system (TMOF_INIT_NETWORKING)
Telemetry[LOG]: %short Stack var! ref = 0x%p var = 0x%p
Telemetry[LOG]: %short Starting tmio thread
Telemetry[LOG]: %short Telemetry base context size: %double bytes
Telemetry[LOG]: %short Using tools version 0x%long long
Telemetry[LOG]: %short Waiting for disconnect
Telemetry[LOG]: %short Waiting for handshake
Telemetry[LOG]: %short Waiting for io connection to close
Telemetry[LOG]: %short build: Sep 12 2014 10:36:19
Telemetry[LOG]: %short clearing map signature %double (%short) : %short
Telemetry[LOG]: %short cmd: 0x%long long size: 0x%long long
Telemetry[LOG]: %short done
Telemetry[LOG]: %short finding map signatures
Telemetry[LOG]: %short found %double map signatures
Telemetry[LOG]: %short found map signatures
Telemetry[LOG]: %short tick [void%double]%double @ 0x%llx
Telemetry[LOG]: %short tmOpen - (%short)%short (%short), %short:%double
Telemetry[LOG]: %short version: 2.0P(CHECKED)
Telemetry[WARNING]: %short Application logical path '%short' is an invalid name
Telemetry[WARNING]: %short Application name '%short' is an invalid name (must be alphanumeric and not contain spaces)
Telemetry[WARNING]: %short Bad handshake, disconnecting
Telemetry[WARNING]: %short Called tmSetLockStateMinTime with corrupt buffer
Telemetry[WARNING]: %short Context size > 4MB...this may impact performance!  1-MB recommended!
Telemetry[WARNING]: %short Could not connect!
Telemetry[WARNING]: %short Could not start system networking subsystem!
Telemetry[WARNING]: %short Dynamic strings not allowed for value string!
Telemetry[WARNING]: %short Failed to create connection
Telemetry[WARNING]: %short Failed to open network connection.
Telemetry[WARNING]: %short Failed to send TM_APP_MAGIC
Telemetry[WARNING]: %short Handshake indicates server side failure with msg '%short'
Telemetry[WARNING]: %short Invalid buffer parameter
Telemetry[WARNING]: %short Invalid connection type '%double'
Telemetry[WARNING]: %short Invalid context
Telemetry[WARNING]: %short Invalid context passed to tmCoreGetPlatformInformation
Telemetry[WARNING]: %short Invalid information type
Telemetry[WARNING]: %short Invalid lock result '%double' passed to tmCoreEndTryLock
Telemetry[WARNING]: %short Invalid lock state '%double'
Telemetry[WARNING]: %short Invalid parameter
Telemetry[WARNING]: %short Invalid parameter '%double', assuming %double
Telemetry[WARNING]: %short Invalid parameter value %double passed to tmSetParameter
Telemetry[WARNING]: %short Invalid pointer passed to tmCoreGetPlatformInformation
Telemetry[WARNING]: %short Invalid socket buffer size parameter
Telemetry[WARNING]: %short Invalid value %double for TMP_LOCK_MIN_TIME
Telemetry[WARNING]: %short Invalid value %double for TMP_TELEMETRY_PREFERRED_CPU
Telemetry[WARNING]: %short Missing handshake, disconnecting
Telemetry[WARNING]: %short Mutex name table full
Telemetry[WARNING]: %short NULL format specifier passed
Telemetry[WARNING]: %short NULL key or value passed
Telemetry[WARNING]: %short NULL name specified
Telemetry[WARNING]: %short NULL passed for name or desc
Telemetry[WARNING]: %short NULL passed for name or file
Telemetry[WARNING]: %short NULL string passed
Telemetry[WARNING]: %short Negative zone total
Telemetry[WARNING]: %short Stack variable passed for description!
Telemetry[WARNING]: %short Stack variable passed for name!
Telemetry[WARNING]: %short Stack variable specified for name
Telemetry[WARNING]: %short Stack variable used for format string
Telemetry[WARNING]: %short Stack variable used for location
Telemetry[WARNING]: %short Stack variable used for name
Telemetry[WARNING]: %short Telemetry already shut down
Telemetry[WARNING]: %short Telemetry uninitialized
Telemetry[WARNING]: %short Timed out waiting for handshake
Telemetry[WARNING]: %short TmStringTable_Put - capacity over 50%%
Telemetry[WARNING]: %short Unknown option '%double'
Telemetry[WARNING]: %short Unknown protocol version 0x%long long!
Telemetry[WARNING]: %short Unknown server cmd 0x%long long
Telemetry[WARNING]: %short User timer precision is too low!  Microsecond accurate timer is required!
Telemetry[WARNING]: %short mismatched format codes!
Telemetry[WARNING]: %short tmCheckDebugZoneLevel has been deprecated and is disabled!
Telemetry[WARNING]: %short tmCoreStartup called multiple times
Telemetry[WARNING]: %short tmSetDebugZoneLevel has been deprecated and is disabled!
Telemetry[WARNING]: %short tmUnwindToDebugZoneLevel has been deprecated and is disabled!
TmConnectionStatus itmCoreGetConnectionStatus(HTELEMETRY)
TmErrorCode TmIo::openNetworkConnections(TmContext*, int, int)
TmErrorCode itmCoreGetLastError(HTELEMETRY)
TmErrorCode itmCoreGetPlatformInformation(void*, TmPlatformInformation, void*, U32)
TmErrorCode itmCoreGetSessionName(HTELEMETRY, char*, int)
TmErrorCode itmCoreInitializeContext(TmContext**, void*, U32)
TmErrorCode itmCoreOpen(HTELEMETRY, const char*, const char*, const char*, TmConnectionType, U16, U32, int)
TmErrorCode itmCoreStartup()
X[A\A]A^A_]
[A\A]
[A\A]A^
[A\A]A^A_]
[A\A]A^A_]1
[A\A]A^]
[A\A]L
[A\A]]
[A\]1
[A\]H
_Jv_RegisterClasses
__bss_start
__cxa_finalize
__errno_location
__gmon_start__
__memcpy_chk
__printf_chk
__snprintf_chk
__sprintf_chk
__vsprintf_chk
_edata
_fini
accept
backtrace
bool TmContext::processServerCommands_noLock(int)
bool sIsStackVar(const void*, const void*)
connect
const char* itmCoreDynamicString(HTELEMETRY, const char*)
dladdr
fclose
fcntl
fflush
fgets
fopen
fread
freeifaddrs
fwrite
gethostbyname
gethostbyname failed
gethostname
getifaddrs
getlogin_r
getpid
getsockopt
gettimeofday
inet_ntoa
int itmCoreGetCallStack(HTELEMETRY, TmCallStack*)
int itmCoreGetCallStackR(HTELEMETRY, TmCallStack*)
int itmCoreIsEnabled(HTELEMETRY, TmOption)
int itmCoreIsPaused(HTELEMETRY)
int itmCoreSendCallStack(HTELEMETRY, const TmCallStack*, int)
int itmCoreSetLockStateMinTime(HTELEMETRY, void*, const void*, TmLockState, const char*, U32, TmFormatCode*, const char*, ...)
int sSetLockStateV(TmContext*, void*, U64, TmLockState, U64, const char*, U32, TmFormatCode*, const char*, __va_list_tag (*)[1])
libc.so.6
listen
localdisk
long long unsigned int TmIo::putString(unsigned int, const char*, TmOutputBuffer&)
long long[A\A]A^A_]
lsof -p %double
malloc
memmove
memset
pclose
perror
popen
process
pthread_attr_destroy
pthread_attr_init
pthread_attr_setstacksize
pthread_create
pthread_detach
pthread_getschedparam
pthread_getspecific
pthread_join
pthread_key_create
pthread_mutex_destroy
pthread_mutex_init
pthread_mutex_lock
pthread_mutex_timedlock
pthread_mutex_trylock
pthread_mutex_unlock
pthread_mutexattr_init
pthread_mutexattr_settype
pthread_self
pthread_setaffinity_np
pthread_setschedparam
pthread_setspecific
pthread_timedjoin_np
pthread_tryjoin_np
pthread_yield
readlink
rrSocket: accept failed with error 0x%long long
rrSocket: connect() failed (%double)
rrSocket: could not bind socket (0x%long long)
rrSocket: error when recving, errno = 0x%long long
rrSocket: select() failed (%double)
rrSocket: send failure, ENOTCONN
rrSocket: send failure, connection aborted
rrSocket: send failure, connection was reset
rrSocket: send failure, error = %double
rrSocket: send failure, not socket
rrSocket: send failure, out of buffer space
rrSocket: send failure, would block
rrSocket: socket() failed with error %double
rrSocketStartup!
rrSockett: getsockopt reported %double while getting connection status
sched_get_priority_max
sched_get_priority_min
select
sem_destroy
sem_init
sem_post
sem_timedwait
sem_trywait
sem_wait
setsockopt
setsockopt(SO_RCVBUF): failed with error %double
setsockopt(SO_SNDBUF): failed with error %double
socket
sscanf
static U32 TmIo::sCommThreadFunc(TmIo*)
static void TmContext::sThreadNameV(TmContext*, U32, TmFormatCode*, const char*, __va_list_tag (*)[1])
stdout
strlen
strtol
sysconf
t1L;%
t1[A\]
t2L;-
t4L;%
tCL;%
tDL;-
tFL;%
tLL;%
tML;-
tOL;%
tUL;%
tVL;-
tXL;%
t_L;-
taL;%
telemetry/buffer size
telemetry/context switches(tevent)
telemetry/network bytes
telemetry/processing_time
telemetry_lockWriteBuffer
tgL;%
thL;-
tjL;%
tlHcP
tmGetAPI
tmTick
tmdata
tpL;%
tqL;-
tr[A\]
tsL;% 
tyL;%
tzL;-
unsigned char[A\A]A^A_]
unsigned short L;-
unsigned short"L;%
unsigned short(L;%
unsigned short)L;-
unsigned short+L;%
unsigned short:L;%
unsigned short;L;-
unsigned short=L;%
unsigned short^<:tZ
unsigned short^L;%
unsigned short|L;%!
usleep
vfprintf
void TmIo::closeNetworkConnections()
void itmCoreAlloc(HTELEMETRY, const void*, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreBeginTimeSpan(HTELEMETRY, U64, U32, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreCheckDebugZoneLevel(HTELEMETRY, int)
void itmCoreClearStaticString(HTELEMETRY, const char*)
void itmCoreClose(HTELEMETRY)
void itmCoreEmitAccumulationZone(HTELEMETRY, U64*, U64, U32, U32, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreEnable(HTELEMETRY, TmOption, int)
void itmCoreEndTimeSpan(HTELEMETRY, U64, U32, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreEndTryLock(HTELEMETRY, U64, const char*, int, TmFormatCode*, const void*, TmLockResult)
void itmCoreFlush(HTELEMETRY)
void itmCoreFree(HTELEMETRY, const void*, const char*, int, TmFormatCode*)
void itmCoreLeave(HTELEMETRY, U64, U32, const char*, int)
void itmCoreLockName(HTELEMETRY, const void*, TmFormatCode*, const char*, ...)
void itmCoreMessage(HTELEMETRY, U32, U32, TmFormatCode*, const char*, ...)
void itmCorePause(HTELEMETRY, int)
void itmCoreSetDebugZoneLevel(HTELEMETRY, int)
void itmCoreSetLockState(HTELEMETRY, const void*, TmLockState, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreSetParameter(HTELEMETRY, TmParameter, const void*)
void itmCoreSetServerConfiguration(HTELEMETRY, TmServerConfiguration, const void*)
void itmCoreSetTimelineSectionName(HTELEMETRY, TmFormatCode*, const char*, ...)
void itmCoreSetVariable(HTELEMETRY, const char*, TmFormatCode*, const char*, ...)
void itmCoreShutdown()
void itmCoreShutdownContext(HTELEMETRY)
void itmCoreSignalLockCount(HTELEMETRY, const char*, U32, const void*, U32, TmFormatCode*, const char*, ...)
void itmCoreThreadName(HTELEMETRY, U32, TmFormatCode*, const char*, ...)
void itmCoreTick(HTELEMETRY)
void itmCoreTryLock(HTELEMETRY, U64*, U64, const char*, U32, const void*, TmFormatCode*, const char*, ...)
void itmCoreUnwindToDebugZoneLevel(HTELEMETRY, int)
void itmCoreUpdateSymbolData(HTELEMETRY)
void sCoreAllocV(TmContext*, const void*, U64, const char*, U32, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCoreDisjointBlobV(HTELEMETRY, int, const void**, const int*, const char*, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCoreEmitAccumulationZoneV(TmContext*, U64*, U64, U32, U32, const char*, U32, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCoreEnterV(HTELEMETRY, U64*, U32, U64, U32, const char*, U32, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCoreLockNameV(TmContext*, U64, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCoreMessageV(TmContext*, U32, U32, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, __va_list_tag (*)[1]) [with T = double, int type = 1, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = __va_list_tag [1]]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, __va_list_tag (*)[1]) [with T = float, int type = 0, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = __va_list_tag [1]]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, __va_list_tag (*)[1]) [with T = int, int type = 2, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = __va_list_tag [1]]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, __va_list_tag (*)[1]) [with T = long long int, int type = 4, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = __va_list_tag [1]]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, __va_list_tag (*)[1]) [with T = long long unsigned int, int type = 5, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = __va_list_tag [1]]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, __va_list_tag (*)[1]) [with T = unsigned int, int type = 3, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = __va_list_tag [1]]
void sCoreSetTimelineSectionNameV(TmContext*, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCoreSetVariableV(TmContext*, const char*, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCoreSignalLockCount(TmContext*, const char*, U32, const void*, U32, TmFormatCode*, const char*, __va_list_tag (*)[1])
void sCoreTryLockV(TmContext*, U64, U64, const char*, U32, const void*, TmFormatCode*, const char*, __va_list_tag (*)[1])
waiting for data
x64/LinuH
zD/proc/%int/exe
